import { GoogleGenAI, Type } from '@google/genai'
import { createBooking, getUserBookings, cancelBooking } from './mongo'
import { createBookingListFlex } from '@/messages/flex'

import { google } from 'googleapis'
import dotenv from 'dotenv'

dotenv.config()

const oauth2Client = new google.auth.OAuth2(
  process.env.GOOGLE_CLIENT_ID,
  process.env.GOOGLE_CLIENT_SECRET,
  process.env.GOOGLE_REDIRECT_URI,
)
oauth2Client.setCredentials({ refresh_token: process.env.GOOGLE_REFRESH_TOKEN })

const geminiKey = process.env.GEMINI_API_KEY!
const genAI = new GoogleGenAI({ apiKey: geminiKey })

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OAuth2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Calendar
 * - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏±‡∏ö Google
 */
export async function oauth2(): Promise<string> {
  const url = oauth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: ['https://www.googleapis.com/auth/calendar'],
    prompt: 'consent', // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ñ‡∏≤‡∏° refresh token ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  })
  return url
}

/**
 * ‡∏£‡∏±‡∏ö authorization code ‡∏à‡∏≤‡∏Å Google ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡πá‡∏ô refresh token
 * - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö refresh token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google Calendar API
 */
export async function oauth2GetToken(code: string): Promise<string> {
  const { tokens } = await oauth2Client.getToken(code)
  console.log('Access Token:', tokens.access_token)
  console.log('Refresh Token:', tokens.refresh_token)
  return tokens.refresh_token!
}

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Gemini ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á event ‡πÉ‡∏ô Google Calendar
 * - 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡πÅ‡∏•‡∏∞ function declaration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini
 * - 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á event
 * - 3. ‡∏ñ‡πâ‡∏≤ Gemini ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô function call: ‡∏™‡∏£‡πâ‡∏≤‡∏á event ‡πÉ‡∏ô Google Calendar ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
 * - 4. ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á error

 */
export async function handleBookingGemini(
  userId: string,
  session: { title: string; date: string; time: string },
): Promise<string> {
  console.log('‚ñ∂Ô∏è [handleBookingGeminiAdvance] Prepare to call Gemini', session)

  const prompt = `‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "${session.title}" ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${session.date} ‡πÄ‡∏ß‡∏•‡∏≤ ${session.time}`

  const scheduleMeetingFunctionDeclaration = {
    name: 'create_calendar_event',
    description: "Create an event in the user's calendar.",
    parameters: {
      type: Type.OBJECT,
      properties: {
        title: { type: Type.STRING, description: 'Title of the event' },
        date: { type: Type.STRING, description: 'Date of the event' },
        time: { type: Type.STRING, description: 'Time of the event' },
      },
      required: ['title', 'date', 'time'],
    },
  }

  const response = await genAI.models.generateContent({
    model: 'gemini-2.0-flash',
    contents: prompt,
    config: {
      tools: [
        {
          functionDeclarations: [scheduleMeetingFunctionDeclaration],
        },
      ],
    },
  })

  if (response.functionCalls && response.functionCalls.length > 0) {
    const functionCall = response.functionCalls[0]

    const args = functionCall.args as {
      title: string
      date: string
      time: string
    }

    const datetimeISO = new Date(`${args.date}T${args.time}:00`).toISOString()

    const event = await createCalendarEvent({
      title: args.title,
      date: datetimeISO,
    })
    await createBooking(userId, args.title, datetimeISO, event.id)

    return `‚úÖ ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${event.link}&openExternalBrowser=1`
  }

  return '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞'
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * - 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking ‡∏à‡∏≤‡∏Å MongoDB
 * - 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 * - 3. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏Ñ‡∏∑‡∏ô flex message ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
 */
export async function viewBookingList(userId: string) {
  const bookings = await getUserBookings(userId)

  console.log(bookings)

  if (bookings.length === 0) {
    return { type: 'text', message: 'üìÖ ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞' }
  }

  return createBookingListFlex(bookings)
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á event ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Google Calendar (‡πÑ‡∏°‡πà‡∏°‡∏µ location)
 */
export async function createCalendarEvent({
  title,
  date,
}: {
  title: string
  date: string
}) {
  console.log('‚ñ∂Ô∏è [calendarService] Creating calendar event:', { title, date })
  const calendar = google.calendar({ version: 'v3', auth: oauth2Client })
  const event = {
    summary: title,
    start: {
      dateTime: date,
      timeZone: 'Asia/Bangkok',
    },
    end: {
      dateTime: new Date(new Date(date).getTime() + 60 * 60 * 1000).toISOString(),
      timeZone: 'Asia/Bangkok',
    },
  }

  const response = await calendar.events.insert({
    calendarId: 'primary',
    requestBody: event,
  })

  console.log('‚úÖ [calendarService] Event Created:', response.data.htmlLink)
  return {
    id: response.data.id!,
    link: response.data.htmlLink!,
  }
}

/**
 * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞ Google Calendar)
 * - 1. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å booking ‡πÉ‡∏ô MongoDB
 * - 2. ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö eventId ‡πÉ‡∏´‡πâ‡∏•‡∏ö event ‡πÉ‡∏ô Google Calendar
 * - 3. ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
 */
export async function cancelBookingHandler(userId: string, eventId: string) {
  const booking = await cancelBooking(userId, eventId)
  console.log('booking_>', booking)

  if (!booking) {
    return { type: 'text', text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πà‡∏∞' }
  }

  if (eventId) {
    await deleteCalendarEvent(eventId)
  }

  return { type: 'text', text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' }
}

/**
 * ‡∏•‡∏ö event ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Google Calendar
 * - 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Google Calendar API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö event ‡∏ï‡∏≤‡∏° eventId
 * - 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏Å‡∏£‡∏ì‡∏µ event ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
 */
export async function deleteCalendarEvent(eventId: string) {
  console.log('üõ† [calendarService] Deleting event:', eventId)

  const calendar = google.calendar({ version: 'v3', auth: oauth2Client })

  try {
    await calendar.events.delete({
      calendarId: 'primary',
      eventId: eventId,
    })
    console.log('‚úÖ [calendarService] Event deleted successfully')
  } catch (error: any) {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Error ‡∏à‡∏≤‡∏Å Google API
    if (error.errors && Array.isArray(error.errors)) {
      const firstError = error.errors[0]
      if (firstError.reason === 'deleted') {
        console.log('‚ö†Ô∏è [calendarService] Event already deleted. No action needed.')
        return
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'deleted' ‡∏Å‡πá throw error ‡∏õ‡∏Å‡∏ï‡∏¥
    console.error('‚ùå [calendarService] Error deleting event:', error)
    throw error
  }
}
