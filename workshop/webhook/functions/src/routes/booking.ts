import express, { Request, Response } from 'express'
import { LineEvent } from '@/types/webhook'
import dotenv from 'dotenv'
import { reply, isAnimationLoading } from '@/utils/line'
import { handleBookingGemini } from '@/utils/booking'
import { redisGet, redisSet, redisDel } from '@/utils/redis'

import { oauth2, oauth2GetToken, viewBookingList, cancelBookingHandler } from '@/utils/booking'

dotenv.config()

const router = express.Router()

// =========================
//  Booking Route Handlers
// =========================

router.post('/', async (request: Request, response: Response) => {
  /*
    Step 1: ‡∏£‡∏±‡∏ö events ‡∏à‡∏≤‡∏Å request
    Step 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ events ‡πÄ‡∏õ‡πá‡∏ô array
    Step 3: ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞ event
      - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà group: ‡πÅ‡∏™‡∏î‡∏á animation loading
      - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (message):
        - ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ '‡∏î‡∏π‡∏ô‡∏±‡∏î' ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        - ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢' ‡πÅ‡∏¢‡∏Å eventId ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        - ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà flow ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ (handleBooking)
      - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô postback:
        - action=selectDate: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≠
        - action=selectTime: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
    Step 4: ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏ö response
  */

  const events: LineEvent[] = request.body.events

  if (!Array.isArray(events)) {
    console.error("Invalid payload: 'events' is not an array", request.body)
    response.status(400).send('Invalid payload')
    return
  }

  for (const event of events) {
    if (event.source.type !== 'group') {
      await isAnimationLoading(event.source.userId!)
    }
    if (event.type === 'message' && event.message?.type === 'text') {
      const userId = event.source.userId
      const userText = event.message.text
      if (event.type === 'message' && event.message.type === 'text') {
        if (userText!.includes('‡∏î‡∏π‡∏ô‡∏±‡∏î')) {
          const message = await viewBookingList(userId!)
          await reply(event.replyToken!, [message])
        } else if (userText!.includes('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢')) {
          const parts = userText!.split(' ')
          const eventId = parts[1]

          if (!eventId) {
            await reply(event.replyToken!, [
              { type: 'text', text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πà‡∏∞' },
            ])
          } else {
            const message = await cancelBookingHandler(userId!, eventId)
            await reply(event.replyToken!, [message])
          }
        } else {
          await handleBooking(userId!, event.replyToken!, userText!)
        }
      }
    }

    if (event.type === 'postback') {
      const userId = event.source.userId
      const data = event.postback!.data
      const params = new URLSearchParams(data)
      const action = params.get('action')

      if (action === 'selectDate') {
        const selectedDate = event.postback!.params?.date
        await saveSelectedDate(userId!, selectedDate!)
        await reply(event.replyToken!, [
          {
            type: 'text',
            text: `‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤...`,
            quickReply: {
              items: [
                {
                  type: 'action',
                  action: {
                    type: 'datetimepicker',
                    label: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤',
                    data: 'action=selectTime',
                    mode: 'time',
                  },
                },
              ],
            },
          },
        ])
      }

      if (action === 'selectTime') {
        const selectedTime = event.postback!.params?.time
        await saveSelectedTime(userId!, selectedTime!)
        await reply(event.replyToken!, [
          {
            type: 'text',
            text: `‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ ${selectedTime} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞`,
          },
        ])
      }
    }
  }

  response.end()
})

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ flow ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö step-by-step ‡∏î‡πâ‡∏ß‡∏¢ session ‡πÉ‡∏ô Redis
 * - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏î‡∏π‡∏ô‡∏±‡∏î'
 * - ‡∏ñ‡∏≤‡∏°‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
 * - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleBookingGemini ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á
 * - ‡∏´‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ‡∏•‡∏ö session ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
 * - ‡∏´‡∏≤‡∏Å‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏•‡∏ö session ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
 */
export async function handleBooking(userId: string, replyToken: string, userInput: string) {
  const cacheKey = `session:booking:${userId}`
  const cacheTTL = 60 * 5

  let sessionStr = await redisGet(cacheKey)
  let session = sessionStr ? JSON.parse(sessionStr) : null

  if (!session) {
    if (userInput.includes('‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î')) {
      await redisSet(cacheKey, JSON.stringify({ step: 'ask_date' }), cacheTTL)
      await reply(replyToken, [
        {
          type: 'text',
          text: 'üóìÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞',
          quickReply: {
            items: [
              {
                type: 'action',
                action: {
                  type: 'datetimepicker',
                  label: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô',
                  data: 'action=selectDate',
                  mode: 'date',
                },
              },
            ],
          },
        },
      ])
      return
    } else {
      await reply(replyToken, [
        {
          type: 'text',
          text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î '‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏î‡∏π‡∏ô‡∏±‡∏î' ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏∞",
          quickReply: {
            items: [
              {
                type: 'action',
                action: {
                  type: 'message',
                  label: 'üìù ‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î',
                  text: '‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î',
                },
              },
              {
                type: 'action',
                action: {
                  type: 'message',
                  label: 'üìÖ ‡∏î‡∏π‡∏ô‡∏±‡∏î',
                  text: '‡∏î‡∏π‡∏ô‡∏±‡∏î',
                },
              },
            ],
          },
        },
      ])
      return
    }
  }

  switch (session.step) {
    case 'ask_time':
      await redisSet(
        cacheKey,
        JSON.stringify({ ...session, step: 'ask_title', time: userInput }),
        cacheTTL,
      )
      await reply(replyToken, [{ type: 'text', text: 'üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞' }])
      break

    case 'ask_title':
      await redisSet(
        cacheKey,
        JSON.stringify({ ...session, step: 'confirm', title: userInput }),
        cacheTTL,
      )
      await reply(replyToken, [
        {
          type: 'text',
          text: `‚úÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:\n\n‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${userInput}\n‡∏ß‡∏±‡∏ô: ${session.date}\n‡πÄ‡∏ß‡∏•‡∏≤: ${session.time}\n\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡∏Ñ‡πà‡∏∞`,
          quickReply: {
            items: [
              {
                type: 'action',
                action: {
                  type: 'message',
                  label: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                  text: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                },
              },
              {
                type: 'action',
                action: {
                  type: 'message',
                  label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                  text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                },
              },
            ],
          },
        },
      ])
      break

    case 'confirm':
      if (userInput.includes('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')) {
        // ‡∏™‡πà‡∏á session ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ location
        const message = await handleBookingGemini(userId, {
          title: session.title,
          date: session.date,
          time: session.time,
        })
        await redisDel(cacheKey)
        await reply(replyToken, [
          {
            type: 'text',
            text: message,
            quickReply: {
              items: [
                {
                  type: 'action',
                  action: {
                    type: 'message',
                    label: '‡∏î‡∏π‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢',
                    text: '‡∏î‡∏π‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢',
                  },
                },
              ],
            },
          },
        ])
      } else if (userInput.includes('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')) {
        await redisDel(cacheKey)
        await reply(replyToken, [{ type: 'text', text: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' }])
      } else {
        await reply(replyToken, [
          { type: 'text', text: "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡∏Ñ‡πà‡∏∞" },
        ])
      }
      break

    default:
      await redisDel(cacheKey)
      await reply(replyToken, [
        { type: 'text', text: "‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞" },
      ])
      break
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á session (Redis)
 * - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô postback action=selectDate
 */
export async function saveSelectedDate(userId: string, date: string) {
  const cacheKey = `session:booking:${userId}`
  let sessionStr = await redisGet(cacheKey)
  let session = sessionStr ? JSON.parse(sessionStr) : {}

  session.date = date
  session.step = 'ask_time'
  await redisSet(cacheKey, JSON.stringify(session), 300)
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á session (Redis)
 * - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô postback action=selectTime
 */
export async function saveSelectedTime(userId: string, time: string) {
  const cacheKey = `session:booking:${userId}`
  let sessionStr = await redisGet(cacheKey)
  let session = sessionStr ? JSON.parse(sessionStr) : {}

  session.time = time
  session.step = 'ask_title'
  await redisSet(cacheKey, JSON.stringify(session), 300)
}

// =========================
//  OAuth2 Callback Handlers
// =========================

router.get('/auth', async (request: Request, response: Response) => {
  /*
    Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OAuth2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Google Calendar
    Step 2: redirect ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google
  */
  const url = await oauth2()
  return response.redirect(url)
})

router.get('/oauth2callback', async (request: Request, response: Response) => {
  /*
    Step 1: ‡∏£‡∏±‡∏ö code ‡∏à‡∏≤‡∏Å query
    Step 2: ‡πÅ‡∏•‡∏Å code ‡πÄ‡∏õ‡πá‡∏ô refresh token
    Step 3: ‡πÅ‡∏™‡∏î‡∏á refresh token ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö
  */
  const code = request.query.code as string
  if (!code) {
    return response.status(400).send('Missing code')
  }

  try {
    const refresh_token = await oauth2GetToken(code)
    return response.send(`
        <h1>‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!</h1>
        <p><strong>Refresh Token:</strong></p>
        <pre>${refresh_token}</pre>
        <p>‡πÄ‡∏≠‡∏≤ refresh token ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô .env ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‚úÖ</p>
      `)
  } catch (error) {
    console.error('Error getting token:', error)
    return response.status(500).send('Error getting token')
  }
})

export default router
