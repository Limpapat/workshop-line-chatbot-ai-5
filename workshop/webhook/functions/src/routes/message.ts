import express, { Request, Response } from 'express'
import { broadcastConsumption, multicast, getProfile, pushWithStateless,pushWithCustomAggregation } from '@/utils/line'
import { BroadcastPayload, LineMessage, MulticastPayload } from '@/types/line'
import { flexProfile } from '@/messages/flex'
const router = express.Router()

// =========================
//  Message Routes
// =========================

router.post('/broadcast', async (request: Request, response: Response) => {
  /*
    Step 1: ‡∏£‡∏±‡∏ö payload ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    Step 2: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° broadcast ‡∏´‡∏≤‡∏Å payload ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    Step 3: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
  */
  try {
    const payload: BroadcastPayload = request.body
    await broadcastConsumption(payload)
    return response.status(200).send('‚úÖ Broadcast sent successfully')
  } catch (error: any) {
    console.error('‚ùå Error broadcasting message:', error.message || error)
    return response.status(500).send('Failed to send broadcast')
  }
})

router.post('/multicast', async (request: Request, response: Response) => {
  /*
    Step 1: ‡∏£‡∏±‡∏ö userId array ‡∏à‡∏≤‡∏Å request body ‡πÅ‡∏•‡∏∞ validate
    Step 2: ‡πÅ‡∏ö‡πà‡∏á userId ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡πà‡∏≠‡∏¢ (batch) ‡∏•‡∏∞ 500 ‡∏Ñ‡∏ô
    Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° flex message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á
    Step 4: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° multicast ‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
    Step 5: ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏ö
  */
  const users: string[] = request.body.to
  if (!Array.isArray(users) || users.length === 0) {
    return response.status(400).send("Invalid or missing 'to' array")
  }

  const batchSize = 500
  const chunks: string[][] = []

  for (let i = 0; i < users.length; i += batchSize) {
    // Step 2: ‡πÅ‡∏ö‡πà‡∏á userId ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡πà‡∏≠‡∏¢ (batch)
    chunks.push(users.slice(i, i + batchSize))
  }

  const message: LineMessage = {
    type: 'flex',
    altText: '^^ vdo ^^',
    contents: {
      type: 'bubble',
      size: 'giga',
      hero: {
        type: 'video',
        url: 'https://workshop-ex10.s3.ap-southeast-1.amazonaws.com/vdo.mp4',
        previewUrl: 'https://workshop-ex10.s3.ap-southeast-1.amazonaws.com/preview.png',
        aspectRatio: '1280:720',
        altContent: {
          type: 'image',
          size: 'full',
          url: 'https://workshop-ex10.s3.ap-southeast-1.amazonaws.com/preview.png',
        },
      },
    },
  }

  for (const chunk of chunks) {
    // Step 4: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° multicast ‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
    const payload: MulticastPayload = {
      to: chunk,
      messages: [message],
    }

    console.log(payload)
    await multicast(payload)
  }

  return response.status(200).send('‚úÖ Multicast sent.')
})
router.post('/push', async (request: Request, response: Response) => {
  /*
    Step 1: ‡∏£‡∏±‡∏ö userId ‡∏à‡∏≤‡∏Å request body ‡πÅ‡∏•‡∏∞ validate
    Step 2: ‡∏î‡∏∂‡∏á profile ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á flex message
    Step 3: ‡∏™‡πà‡∏á push message
    Step 4: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
  */
  const userId: string = request.body.to
  if (!userId) {
    return response.status(400).send("Missing 'to' userId")
  }

  try {
    const profile = await getProfile(userId)
    const flexMessage = flexProfile(profile.pictureUrl!, profile.displayName)

    await pushWithStateless(userId, [flexMessage])
    return response.status(200).send('‚úÖ Push sent.')
  } catch (error: any) {
    console.error('‚ùå Push error:', error.message || error)
    return response.status(500).send('Failed to send push')
  }
})

router.post('/pushCampaign', async (request: Request, response: Response) => {
  /*
    Step 1: ‡∏£‡∏±‡∏ö userId ‡∏à‡∏≤‡∏Å request body ‡πÅ‡∏•‡∏∞ validate
    Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° campaign message
    Step 3: ‡∏™‡πà‡∏á push message ‡∏û‡∏£‡πâ‡∏≠‡∏° custom aggregation
    Step 4: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
  */
  const userId: string = request.body.to

  if (!userId) {
    return response.status(400).send("Missing 'to' userId")
  }

  try {
    const message = {
      type: 'text',
      text: 'üéâ ‡∏°‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô LINE Chatbot ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢ üëâ https://codelab.line.me/',
      sender: {
        name: 'Cony',
        iconUrl: 'https://line.me/conyprof',
      },
    }

    const payload = {
      to: userId,
      messages: [message],
      customAggregationUnits: ["new_item_message"],
    }

    await pushWithCustomAggregation(payload.to, payload.messages, payload.customAggregationUnits)
    return response.status(200).send('‚úÖ Push sent.')
  } catch (error: any) {
    console.error('‚ùå Push error:', error.message || error)
    return response.status(500).send('Failed to send push')
  }
})

export default router
